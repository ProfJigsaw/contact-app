{"version":3,"sources":["components/Tab.js","components/Tabs.js","components/ContactProfile.js","components/TabContent.js","config/index.js","lib/ContactProcessor.js","App.js","serviceWorker.js","index.js"],"names":["Tab","activeTab","label","count","onClick","className","Tabs","children","key","initialValue","useState","window","localStorage","getItem","storedValue","setStoredValue","value","toString","setItem","useLocalStorage","setActiveTab","map","child","props","ContactProfile","this","profile","closeProfile","fullname","firstName","lastName","toUpperCase","alt","src","avatar","data-testid","username","email","phone","postcode","street","city","state","Component","TabContent","contacts","activeProfile","setActiveProfile","length","firstPane","slice","Math","round","secondPane","contact","configJson","tabs","config","ContactProcessor","rawContacts","forEach","tab","toLowerCase","name","first","last","title","cell","location","streetNumber","number","streetName","login","picture","medium","userKey","substring","push","App","setContacts","hasError","setErrors","numberCards","letters","url","userUrl","useEffect","a","fetch","json","then","res","contactsMap","getContactMap","results","catch","err","fetchData","letter","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.f75ce750.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Tab({ activeTab, label, count, onClick }) {\n  const handleClick = () => onClick(label);\n  let className = 'tab__list__item';\n\n  if (activeTab === label) {\n    className += ' tab__list--active';\n  }\n\n  return (\n    <li className={className} onClick={handleClick}>\n      {count && <span className=\"tab__count\">{count}</span>}\n      {label}\n    </li>\n  );\n}\n\nTab.propTypes = {\n  label: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  activeTab: PropTypes.string.isRequired,\n};\n\nexport default Tab;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Tab from './Tab';\n\nconst useLocalStorage = (key, initialValue) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    const item = window.localStorage.getItem(key) || initialValue;\n    return item\n  });\n\n  const setValue = value => {\n    setStoredValue(value.toString());\n    window.localStorage.setItem(key, value.toString());\n  };\n\n  return [storedValue, setValue];\n}\n\nfunction Tabs({ children }) {\n  const [activeTab, setActiveTab] = useLocalStorage('activeTab', 'a');\n\n  return (\n    <div className=\"tabs\">\n      <ol className=\"tab__list\">\n        {children.map((child) => {\n          const { label, count } = child.props;\n          return (\n            <Tab\n              activeTab={activeTab}\n              key={label}\n              label={label}\n              count={count}\n              onClick={setActiveTab}\n            />\n          );\n        })}\n      </ol>\n      <div className=\"tab__content\">\n        {children.map((child) => {\n          if (child.props.label !== activeTab) return undefined;\n          return child.props.children;\n        })}\n      </div>\n    </div>\n  );\n}\n\nTabs.propTypes = {\n  children: PropTypes.instanceOf(Array).isRequired,\n};\n\nexport default Tabs;\n","import React, { Component } from 'react';\nimport './ContactProfile.css';\n\nclass ContactProfile extends Component {\n  render() {\n    const { profile, closeProfile } = this.props;\n    const fullname = `${profile.firstName}, ${profile.lastName.toUpperCase()}`;\n\n    return (\n      <div className=\"card\">\n        <span className=\"close__btn\" onClick={() => closeProfile()}></span>\n        <div className=\"banner\">\n          <img alt=\"\" src={profile.avatar} />\n        </div>\n        <div className=\"divider\"></div>\n        <h2 className=\"name\">{fullname}</h2>\n        <div className=\"username\" data-testid=\"contact-username\">{profile.username}</div>\n        <div className=\"desc\">\n          <p data-testid=\"contact-email\">{profile.email}</p>\n          <p data-testid=\"contact-phone\">{profile.phone}</p>\n          <p data-testid=\"contact-postcode\">{profile.postcode}</p>\n          <p data-testid=\"contact-street\">{profile.street}, {profile.city}, {profile.state}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ContactProfile;\n","import React, { useState } from 'react';\n\nimport ContactProfile from './ContactProfile';\n\nfunction TabContent({ contacts }) {\n  const [activeProfile, setActiveProfile] = useState(null);\n\n  if (!(contacts && contacts.length)) return <div className=\"no__contact__info\">No contacts to display here!</div>;\n\n  const firstPane = activeProfile ? [] : contacts.slice(0, Math.round(contacts.length/2));\n  const secondPane = activeProfile ? contacts : contacts.slice(Math.round(contacts.length/2));\n\n  return (\n    <div className=\"tab__content__container\">\n      <div className=\"container__row\">\n        <div className=\"container__column\">\n          {activeProfile && <ContactProfile profile={activeProfile} closeProfile={() => setActiveProfile(null)} />}\n          <div className=\"container__card\">\n            {contacts && firstPane.map((contact) => {\n              const fullname = `${contact.firstName}, ${contact.lastName.toUpperCase()}`;\n              return (\n                <p className=\"profile__name\" key={contact.email}>\n                  <span onClick={() => setActiveProfile(contact)}>{fullname}</span>\n                </p>\n              );\n            })}\n          </div>\n        </div>\n\n        <div className=\"container__column\">\n          <div className=\"container__card\">\n            {contacts && secondPane.map((contact) => {\n              const fullname = `${contact.firstName}, ${contact.lastName.toUpperCase()}`;\n              return (\n                <p className=\"profile__name\" key={contact.email}>\n                  <span onClick={() => setActiveProfile(contact)}>{fullname}</span>\n                </p>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TabContent;\n","var configJson = {\n  \"title\": \"Contact List\",\n  \"userUrl\": \"https://api.randomuser.me\",\n  \"numberCards\": 120,\n  \"tabs\": [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n};\n\nexport default configJson;\n","import config from '../config';\n\nconst { tabs } = config;\n\nclass ContactProcessor {\n  static getContactMap(rawContacts) {\n    const map = {};\n    tabs.forEach((tab) => {\n      map[tab.toLowerCase()] = [];\n    });\n    rawContacts.forEach((contact) => {\n      const {\n        name: {\n          first: firstName,\n          last: lastName,\n          title\n        },\n        email,\n        cell,\n        location: {\n          city,\n          state,\n          postcode,\n          street: {\n            number: streetNumber,\n            name: streetName\n          },\n        },\n        login: { username },\n        picture: { medium: avatar }\n      } = contact;\n\n      const userKey = lastName.toLowerCase().substring(0, 1);\n\n      if (map[userKey]) {\n        map[userKey].push({\n          title,\n          city,\n          email,\n          state,\n          avatar,\n          username,\n          lastName,\n          firstName,\n          postcode,\n          phone: cell,\n          street: `${streetNumber} ${streetName}`,\n        })\n      }\n    });\n\n    return map;\n  }\n}\n\nexport default ContactProcessor;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Tabs from './components/Tabs';\nimport TabContent from './components/TabContent';\nimport config from './config';\nimport ContactProcessor from './lib/ContactProcessor';\n\nfunction App() {\n  const [contacts, setContacts] = useState({});\n  const [hasError, setErrors] = useState(false);\n  const {\n    title,\n    userUrl,\n    numberCards,\n    tabs: letters,\n  } = config;\n  const url = `${userUrl}/?results=${numberCards}`\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(url);\n      res\n        .json()\n        .then(res => {\n          const contactsMap = ContactProcessor.getContactMap(res.results);\n          setContacts(contactsMap);\n        })\n        .catch(err => setErrors(err));\n    }\n    fetchData();\n  }, [url]);\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"app__title\">{title}</h1>\n      <Tabs>\n        {letters.map((letter) => {\n          const count = contacts[letter] ? contacts[letter].length.toString() : \"0\";\n          return (\n            <div\n              key={letter}\n              label={letter}\n              count={count}>\n              <TabContent contacts={contacts[letter]}></TabContent>\n            </div>\n          );\n        })}\n      </Tabs>\n      {hasError}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}